class Node {
  constructor(board, player, parent) {
    this.state = new State(board, player);
    this.board = board;
    this.player = player; // 현재 board 에서 마지막으로 둔 player
    this.parent = parent;
    this.children = [];
    this.visits = 0;
    this.wins = 0;
    this.draws = 0;
    this.loses = 0;
    this.possibleMoves = this.determine();
  }

  selection() {
    if (this.isTerminal()) {
      this.possibleMoves.length = 0;
      this.simulate();
      return this;
    }
    if (!this.isFull()) return this;
    let selectedNode = null;
    let maxUct = -Infinity;
    for (const child of this.children) {
      let uct = this.calculateUCT(child);
      if (uct > maxUct) {
        maxUct = uct;
        selectedNode = child;
      }
    }
    // console.log(selectedNode)
    if (selectedNode.isFull()) return selectedNode.selection();
    if (selectedNode.isTerminal()) selectedNode.simulate();
    return selectedNode;
  }

  calculateUCT(node) {
    const wins = node.wins;
    const draws = node.draws;
    const visits = node.visits;
    const parentVisits = this.visits;
    const C = Math.sqrt(2);
    if (visits === 0) {
      return Infinity;
    }
    return (
      (wins + 0.5 * draws) / visits +
      C * Math.sqrt(Math.log(parentVisits) / visits)
    );
  }

  expansion() {
    if (this.possibleMoves.length === 0) return null;
    const randomIndex = Math.floor(Math.random() * this.possibleMoves.length);
    const newBoard = this.possibleMoves.splice(randomIndex, 1)[0];
    const newNode = new Node(newBoard, 3 - this.player, this);
    this.children.push(newNode);
    return newNode;
  }

  /**
   * 가능한 행동을 결정하는 함수
   */
  determine() {
    if (!this.board.includes(0)) return [];
    let b = [];
    for (let i = 0; i < this.board.length; i++) {
      let newBoard = this.board.slice();
      if (newBoard[i] === 0) {
        newBoard[i] = 3 - this.player;
        b.push(newBoard);
      }
    }
    return b;
  }

  isTerminal() {
    return isWin(this.board) !== 0 || this.board.includes(0) === false;
  }

  isFull() {
    return this.possibleMoves.length === 0;
  }

  winRate() {
    return this.visits > 0 ? (this.wins + 0.5 * this.draws) / this.visits : 0;
  }

  simulate() {
    for (let i = 0; i < 50; i++) {
      const result = this.state.simulate();
      switch (result[0]) {
        case this.player:
          this.addWins(1);
          // this.addWins(10-result[1]);
          break;
        case 3 - this.player:
          this.addLoses(1);
          // this.addLoses(10-result[1]);
          break;
        case 0:
          this.addDraws(1);
          break;
      }
    }
  }

  addWins(weight = 1) {
    this.wins += weight;
    this.visits += weight;
    if (this.parent !== null) this.parent.addLoses(weight);
  }

  addDraws(weight = 1) {
    this.draws += weight;
    this.visits += weight;
    if (this.parent !== null) this.parent.addDraws(weight);
  }

  addLoses(weight = 1) {
    this.loses += weight;
    this.visits += weight;
    if (this.parent !== null) this.parent.addWins(weight);
  }
}

export class RootNode extends Node {
  constructor(board = [0, 0, 0, 0, 0, 0, 0, 0, 0], player = 1, parent = null) {
    super(board, player, parent);
  }
}

const omokWin = [
  [0, 1, 2, 3, 4],
  [15, 16, 17, 18, 19],
  [30, 31, 32, 33, 34],
  [45, 46, 47, 48, 49],
  [60, 61, 62, 63, 64],
  [75, 76, 77, 78, 79],
  [90, 91, 92, 93, 94],
  [105, 106, 107, 108, 109],
  [120, 121, 122, 123, 124],
  [135, 136, 137, 138, 139],
  [150, 151, 152, 153, 154],
  [165, 166, 167, 168, 169],
  [180, 181, 182, 183, 184],
  [195, 196, 197, 198, 199],
  [210, 211, 212, 213, 214],
  [1, 2, 3, 4, 5],
  [16, 17, 18, 19, 20],
  [31, 32, 33, 34, 35],
  [46, 47, 48, 49, 50],
  [61, 62, 63, 64, 65],
  [76, 77, 78, 79, 80],
  [91, 92, 93, 94, 95],
  [106, 107, 108, 109, 110],
  [121, 122, 123, 124, 125],
  [136, 137, 138, 139, 140],
  [151, 152, 153, 154, 155],
  [166, 167, 168, 169, 170],
  [181, 182, 183, 184, 185],
  [196, 197, 198, 199, 200],
  [211, 212, 213, 214, 215],
  [2, 3, 4, 5, 6],
  [17, 18, 19, 20, 21],
  [32, 33, 34, 35, 36],
  [47, 48, 49, 50, 51],
  [62, 63, 64, 65, 66],
  [77, 78, 79, 80, 81],
  [92, 93, 94, 95, 96],
  [107, 108, 109, 110, 111],
  [122, 123, 124, 125, 126],
  [137, 138, 139, 140, 141],
  [152, 153, 154, 155, 156],
  [167, 168, 169, 170, 171],
  [182, 183, 184, 185, 186],
  [197, 198, 199, 200, 201],
  [212, 213, 214, 215, 216],
  [3, 4, 5, 6, 7],
  [18, 19, 20, 21, 22],
  [33, 34, 35, 36, 37],
  [48, 49, 50, 51, 52],
  [63, 64, 65, 66, 67],
  [78, 79, 80, 81, 82],
  [93, 94, 95, 96, 97],
  [108, 109, 110, 111, 112],
  [123, 124, 125, 126, 127],
  [138, 139, 140, 141, 142],
  [153, 154, 155, 156, 157],
  [168, 169, 170, 171, 172],
  [183, 184, 185, 186, 187],
  [198, 199, 200, 201, 202],
  [213, 214, 215, 216, 217],
  [4, 5, 6, 7, 8],
  [19, 20, 21, 22, 23],
  [34, 35, 36, 37, 38],
  [49, 50, 51, 52, 53],
  [64, 65, 66, 67, 68],
  [79, 80, 81, 82, 83],
  [94, 95, 96, 97, 98],
  [109, 110, 111, 112, 113],
  [124, 125, 126, 127, 128],
  [139, 140, 141, 142, 143],
  [154, 155, 156, 157, 158],
  [169, 170, 171, 172, 173],
  [184, 185, 186, 187, 188],
  [199, 200, 201, 202, 203],
  [214, 215, 216, 217, 218],
  [5, 6, 7, 8, 9],
  [20, 21, 22, 23, 24],
  [35, 36, 37, 38, 39],
  [50, 51, 52, 53, 54],
  [65, 66, 67, 68, 69],
  [80, 81, 82, 83, 84],
  [95, 96, 97, 98, 99],
  [110, 111, 112, 113, 114],
  [125, 126, 127, 128, 129],
  [140, 141, 142, 143, 144],
  [155, 156, 157, 158, 159],
  [170, 171, 172, 173, 174],
  [185, 186, 187, 188, 189],
  [200, 201, 202, 203, 204],
  [215, 216, 217, 218, 219],
  [6, 7, 8, 9, 10],
  [21, 22, 23, 24, 25],
  [36, 37, 38, 39, 40],
  [51, 52, 53, 54, 55],
  [66, 67, 68, 69, 70],
  [81, 82, 83, 84, 85],
  [96, 97, 98, 99, 100],
  [111, 112, 113, 114, 115],
  [126, 127, 128, 129, 130],
  [141, 142, 143, 144, 145],
  [156, 157, 158, 159, 160],
  [171, 172, 173, 174, 175],
  [186, 187, 188, 189, 190],
  [201, 202, 203, 204, 205],
  [216, 217, 218, 219, 220],
  [7, 8, 9, 10, 11],
  [22, 23, 24, 25, 26],
  [37, 38, 39, 40, 41],
  [52, 53, 54, 55, 56],
  [67, 68, 69, 70, 71],
  [82, 83, 84, 85, 86],
  [97, 98, 99, 100, 101],
  [112, 113, 114, 115, 116],
  [127, 128, 129, 130, 131],
  [142, 143, 144, 145, 146],
  [157, 158, 159, 160, 161],
  [172, 173, 174, 175, 176],
  [187, 188, 189, 190, 191],
  [202, 203, 204, 205, 206],
  [217, 218, 219, 220, 221],
  [8, 9, 10, 11, 12],
  [23, 24, 25, 26, 27],
  [38, 39, 40, 41, 42],
  [53, 54, 55, 56, 57],
  [68, 69, 70, 71, 72],
  [83, 84, 85, 86, 87],
  [98, 99, 100, 101, 102],
  [113, 114, 115, 116, 117],
  [128, 129, 130, 131, 132],
  [143, 144, 145, 146, 147],
  [158, 159, 160, 161, 162],
  [173, 174, 175, 176, 177],
  [188, 189, 190, 191, 192],
  [203, 204, 205, 206, 207],
  [218, 219, 220, 221, 222],
  [9, 10, 11, 12, 13],
  [24, 25, 26, 27, 28],
  [39, 40, 41, 42, 43],
  [54, 55, 56, 57, 58],
  [69, 70, 71, 72, 73],
  [84, 85, 86, 87, 88],
  [99, 100, 101, 102, 103],
  [114, 115, 116, 117, 118],
  [129, 130, 131, 132, 133],
  [144, 145, 146, 147, 148],
  [159, 160, 161, 162, 163],
  [174, 175, 176, 177, 178],
  [189, 190, 191, 192, 193],
  [204, 205, 206, 207, 208],
  [219, 220, 221, 222, 223],
  [10, 11, 12, 13, 14],
  [25, 26, 27, 28, 29],
  [40, 41, 42, 43, 44],
  [55, 56, 57, 58, 59],
  [70, 71, 72, 73, 74],
  [85, 86, 87, 88, 89],
  [100, 101, 102, 103, 104],
  [115, 116, 117, 118, 119],
  [130, 131, 132, 133, 134],
  [145, 146, 147, 148, 149],
  [160, 161, 162, 163, 164],
  [175, 176, 177, 178, 179],
  [190, 191, 192, 193, 194],
  [205, 206, 207, 208, 209],
  [220, 221, 222, 223, 224],
  [0, 15, 30, 45, 60],
  [1, 16, 31, 46, 61],
  [2, 17, 32, 47, 62],
  [3, 18, 33, 48, 63],
  [4, 19, 34, 49, 64],
  [5, 20, 35, 50, 65],
  [6, 21, 36, 51, 66],
  [7, 22, 37, 52, 67],
  [8, 23, 38, 53, 68],
  [9, 24, 39, 54, 69],
  [10, 25, 40, 55, 70],
  [11, 26, 41, 56, 71],
  [12, 27, 42, 57, 72],
  [13, 28, 43, 58, 73],
  [14, 29, 44, 59, 74],
  [15, 30, 45, 60, 75],
  [16, 31, 46, 61, 76],
  [17, 32, 47, 62, 77],
  [18, 33, 48, 63, 78],
  [19, 34, 49, 64, 79],
  [20, 35, 50, 65, 80],
  [21, 36, 51, 66, 81],
  [22, 37, 52, 67, 82],
  [23, 38, 53, 68, 83],
  [24, 39, 54, 69, 84],
  [25, 40, 55, 70, 85],
  [26, 41, 56, 71, 86],
  [27, 42, 57, 72, 87],
  [28, 43, 58, 73, 88],
  [29, 44, 59, 74, 89],
  [30, 45, 60, 75, 90],
  [31, 46, 61, 76, 91],
  [32, 47, 62, 77, 92],
  [33, 48, 63, 78, 93],
  [34, 49, 64, 79, 94],
  [35, 50, 65, 80, 95],
  [36, 51, 66, 81, 96],
  [37, 52, 67, 82, 97],
  [38, 53, 68, 83, 98],
  [39, 54, 69, 84, 99],
  [40, 55, 70, 85, 100],
  [41, 56, 71, 86, 101],
  [42, 57, 72, 87, 102],
  [43, 58, 73, 88, 103],
  [44, 59, 74, 89, 104],
  [45, 60, 75, 90, 105],
  [46, 61, 76, 91, 106],
  [47, 62, 77, 92, 107],
  [48, 63, 78, 93, 108],
  [49, 64, 79, 94, 109],
  [50, 65, 80, 95, 110],
  [51, 66, 81, 96, 111],
  [52, 67, 82, 97, 112],
  [53, 68, 83, 98, 113],
  [54, 69, 84, 99, 114],
  [55, 70, 85, 100, 115],
  [56, 71, 86, 101, 116],
  [57, 72, 87, 102, 117],
  [58, 73, 88, 103, 118],
  [59, 74, 89, 104, 119],
  [60, 75, 90, 105, 120],
  [61, 76, 91, 106, 121],
  [62, 77, 92, 107, 122],
  [63, 78, 93, 108, 123],
  [64, 79, 94, 109, 124],
  [65, 80, 95, 110, 125],
  [66, 81, 96, 111, 126],
  [67, 82, 97, 112, 127],
  [68, 83, 98, 113, 128],
  [69, 84, 99, 114, 129],
  [70, 85, 100, 115, 130],
  [71, 86, 101, 116, 131],
  [72, 87, 102, 117, 132],
  [73, 88, 103, 118, 133],
  [74, 89, 104, 119, 134],
  [75, 90, 105, 120, 135],
  [76, 91, 106, 121, 136],
  [77, 92, 107, 122, 137],
  [78, 93, 108, 123, 138],
  [79, 94, 109, 124, 139],
  [80, 95, 110, 125, 140],
  [81, 96, 111, 126, 141],
  [82, 97, 112, 127, 142],
  [83, 98, 113, 128, 143],
  [84, 99, 114, 129, 144],
  [85, 100, 115, 130, 145],
  [86, 101, 116, 131, 146],
  [87, 102, 117, 132, 147],
  [88, 103, 118, 133, 148],
  [89, 104, 119, 134, 149],
  [90, 105, 120, 135, 150],
  [91, 106, 121, 136, 151],
  [92, 107, 122, 137, 152],
  [93, 108, 123, 138, 153],
  [94, 109, 124, 139, 154],
  [95, 110, 125, 140, 155],
  [96, 111, 126, 141, 156],
  [97, 112, 127, 142, 157],
  [98, 113, 128, 143, 158],
  [99, 114, 129, 144, 159],
  [100, 115, 130, 145, 160],
  [101, 116, 131, 146, 161],
  [102, 117, 132, 147, 162],
  [103, 118, 133, 148, 163],
  [104, 119, 134, 149, 164],
  [105, 120, 135, 150, 165],
  [106, 121, 136, 151, 166],
  [107, 122, 137, 152, 167],
  [108, 123, 138, 153, 168],
  [109, 124, 139, 154, 169],
  [110, 125, 140, 155, 170],
  [111, 126, 141, 156, 171],
  [112, 127, 142, 157, 172],
  [113, 128, 143, 158, 173],
  [114, 129, 144, 159, 174],
  [115, 130, 145, 160, 175],
  [116, 131, 146, 161, 176],
  [117, 132, 147, 162, 177],
  [118, 133, 148, 163, 178],
  [119, 134, 149, 164, 179],
  [120, 135, 150, 165, 180],
  [121, 136, 151, 166, 181],
  [122, 137, 152, 167, 182],
  [123, 138, 153, 168, 183],
  [124, 139, 154, 169, 184],
  [125, 140, 155, 170, 185],
  [126, 141, 156, 171, 186],
  [127, 142, 157, 172, 187],
  [128, 143, 158, 173, 188],
  [129, 144, 159, 174, 189],
  [130, 145, 160, 175, 190],
  [131, 146, 161, 176, 191],
  [132, 147, 162, 177, 192],
  [133, 148, 163, 178, 193],
  [134, 149, 164, 179, 194],
  [135, 150, 165, 180, 195],
  [136, 151, 166, 181, 196],
  [137, 152, 167, 182, 197],
  [138, 153, 168, 183, 198],
  [139, 154, 169, 184, 199],
  [140, 155, 170, 185, 200],
  [141, 156, 171, 186, 201],
  [142, 157, 172, 187, 202],
  [143, 158, 173, 188, 203],
  [144, 159, 174, 189, 204],
  [145, 160, 175, 190, 205],
  [146, 161, 176, 191, 206],
  [147, 162, 177, 192, 207],
  [148, 163, 178, 193, 208],
  [149, 164, 179, 194, 209],
  [150, 165, 180, 195, 210],
  [151, 166, 181, 196, 211],
  [152, 167, 182, 197, 212],
  [153, 168, 183, 198, 213],
  [154, 169, 184, 199, 214],
  [155, 170, 185, 200, 215],
  [156, 171, 186, 201, 216],
  [157, 172, 187, 202, 217],
  [158, 173, 188, 203, 218],
  [159, 174, 189, 204, 219],
  [160, 175, 190, 205, 220],
  [161, 176, 191, 206, 221],
  [162, 177, 192, 207, 222],
  [163, 178, 193, 208, 223],
  [164, 179, 194, 209, 224],
  [0, 16, 32, 48, 64],
  [15, 31, 47, 63, 79],
  [30, 46, 62, 78, 94],
  [45, 61, 77, 93, 109],
  [60, 76, 92, 108, 124],
  [75, 91, 107, 123, 139],
  [90, 106, 122, 138, 154],
  [105, 121, 137, 153, 169],
  [120, 136, 152, 168, 184],
  [135, 151, 167, 183, 199],
  [150, 166, 182, 198, 214],
  [1, 17, 33, 49, 65],
  [16, 32, 48, 64, 80],
  [31, 47, 63, 79, 95],
  [46, 62, 78, 94, 110],
  [61, 77, 93, 109, 125],
  [76, 92, 108, 124, 140],
  [91, 107, 123, 139, 155],
  [106, 122, 138, 154, 170],
  [121, 137, 153, 169, 185],
  [136, 152, 168, 184, 200],
  [151, 167, 183, 199, 215],
  [2, 18, 34, 50, 66],
  [17, 33, 49, 65, 81],
  [32, 48, 64, 80, 96],
  [47, 63, 79, 95, 111],
  [62, 78, 94, 110, 126],
  [77, 93, 109, 125, 141],
  [92, 108, 124, 140, 156],
  [107, 123, 139, 155, 171],
  [122, 138, 154, 170, 186],
  [137, 153, 169, 185, 201],
  [152, 168, 184, 200, 216],
  [3, 19, 35, 51, 67],
  [18, 34, 50, 66, 82],
  [33, 49, 65, 81, 97],
  [48, 64, 80, 96, 112],
  [63, 79, 95, 111, 127],
  [78, 94, 110, 126, 142],
  [93, 109, 125, 141, 157],
  [108, 124, 140, 156, 172],
  [123, 139, 155, 171, 187],
  [138, 154, 170, 186, 202],
  [153, 169, 185, 201, 217],
  [4, 20, 36, 52, 68],
  [19, 35, 51, 67, 83],
  [34, 50, 66, 82, 98],
  [49, 65, 81, 97, 113],
  [64, 80, 96, 112, 128],
  [79, 95, 111, 127, 143],
  [94, 110, 126, 142, 158],
  [109, 125, 141, 157, 173],
  [124, 140, 156, 172, 188],
  [139, 155, 171, 187, 203],
  [154, 170, 186, 202, 218],
  [5, 21, 37, 53, 69],
  [20, 36, 52, 68, 84],
  [35, 51, 67, 83, 99],
  [50, 66, 82, 98, 114],
  [65, 81, 97, 113, 129],
  [80, 96, 112, 128, 144],
  [95, 111, 127, 143, 159],
  [110, 126, 142, 158, 174],
  [125, 141, 157, 173, 189],
  [140, 156, 172, 188, 204],
  [155, 171, 187, 203, 219],
  [6, 22, 38, 54, 70],
  [21, 37, 53, 69, 85],
  [36, 52, 68, 84, 100],
  [51, 67, 83, 99, 115],
  [66, 82, 98, 114, 130],
  [81, 97, 113, 129, 145],
  [96, 112, 128, 144, 160],
  [111, 127, 143, 159, 175],
  [126, 142, 158, 174, 190],
  [141, 157, 173, 189, 205],
  [156, 172, 188, 204, 220],
  [7, 23, 39, 55, 71],
  [22, 38, 54, 70, 86],
  [37, 53, 69, 85, 101],
  [52, 68, 84, 100, 116],
  [67, 83, 99, 115, 131],
  [82, 98, 114, 130, 146],
  [97, 113, 129, 145, 161],
  [112, 128, 144, 160, 176],
  [127, 143, 159, 175, 191],
  [142, 158, 174, 190, 206],
  [157, 173, 189, 205, 221],
  [8, 24, 40, 56, 72],
  [23, 39, 55, 71, 87],
  [38, 54, 70, 86, 102],
  [53, 69, 85, 101, 117],
  [68, 84, 100, 116, 132],
  [83, 99, 115, 131, 147],
  [98, 114, 130, 146, 162],
  [113, 129, 145, 161, 177],
  [128, 144, 160, 176, 192],
  [143, 159, 175, 191, 207],
  [158, 174, 190, 206, 222],
  [9, 25, 41, 57, 73],
  [24, 40, 56, 72, 88],
  [39, 55, 71, 87, 103],
  [54, 70, 86, 102, 118],
  [69, 85, 101, 117, 133],
  [84, 100, 116, 132, 148],
  [99, 115, 131, 147, 163],
  [114, 130, 146, 162, 178],
  [129, 145, 161, 177, 193],
  [144, 160, 176, 192, 208],
  [159, 175, 191, 207, 223],
  [10, 26, 42, 58, 74],
  [25, 41, 57, 73, 89],
  [40, 56, 72, 88, 104],
  [55, 71, 87, 103, 119],
  [70, 86, 102, 118, 134],
  [85, 101, 117, 133, 149],
  [100, 116, 132, 148, 164],
  [115, 131, 147, 163, 179],
  [130, 146, 162, 178, 194],
  [145, 161, 177, 193, 209],
  [160, 176, 192, 208, 224],
  [4, 18, 32, 46, 60],
  [5, 19, 33, 47, 61],
  [6, 20, 34, 48, 62],
  [7, 21, 35, 49, 63],
  [8, 22, 36, 50, 64],
  [9, 23, 37, 51, 65],
  [10, 24, 38, 52, 66],
  [11, 25, 39, 53, 67],
  [12, 26, 40, 54, 68],
  [13, 27, 41, 55, 69],
  [14, 28, 42, 56, 70],
  [19, 33, 47, 61, 75],
  [20, 34, 48, 62, 76],
  [21, 35, 49, 63, 77],
  [22, 36, 50, 64, 78],
  [23, 37, 51, 65, 79],
  [24, 38, 52, 66, 80],
  [25, 39, 53, 67, 81],
  [26, 40, 54, 68, 82],
  [27, 41, 55, 69, 83],
  [28, 42, 56, 70, 84],
  [29, 43, 57, 71, 85],
  [34, 48, 62, 76, 90],
  [35, 49, 63, 77, 91],
  [36, 50, 64, 78, 92],
  [37, 51, 65, 79, 93],
  [38, 52, 66, 80, 94],
  [39, 53, 67, 81, 95],
  [40, 54, 68, 82, 96],
  [41, 55, 69, 83, 97],
  [42, 56, 70, 84, 98],
  [43, 57, 71, 85, 99],
  [44, 58, 72, 86, 100],
  [49, 63, 77, 91, 105],
  [50, 64, 78, 92, 106],
  [51, 65, 79, 93, 107],
  [52, 66, 80, 94, 108],
  [53, 67, 81, 95, 109],
  [54, 68, 82, 96, 110],
  [55, 69, 83, 97, 111],
  [56, 70, 84, 98, 112],
  [57, 71, 85, 99, 113],
  [58, 72, 86, 100, 114],
  [59, 73, 87, 101, 115],
  [64, 78, 92, 106, 120],
  [65, 79, 93, 107, 121],
  [66, 80, 94, 108, 122],
  [67, 81, 95, 109, 123],
  [68, 82, 96, 110, 124],
  [69, 83, 97, 111, 125],
  [70, 84, 98, 112, 126],
  [71, 85, 99, 113, 127],
  [72, 86, 100, 114, 128],
  [73, 87, 101, 115, 129],
  [74, 88, 102, 116, 130],
  [79, 93, 107, 121, 135],
  [80, 94, 108, 122, 136],
  [81, 95, 109, 123, 137],
  [82, 96, 110, 124, 138],
  [83, 97, 111, 125, 139],
  [84, 98, 112, 126, 140],
  [85, 99, 113, 127, 141],
  [86, 100, 114, 128, 142],
  [87, 101, 115, 129, 143],
  [88, 102, 116, 130, 144],
  [89, 103, 117, 131, 145],
  [94, 108, 122, 136, 150],
  [95, 109, 123, 137, 151],
  [96, 110, 124, 138, 152],
  [97, 111, 125, 139, 153],
  [98, 112, 126, 140, 154],
  [99, 113, 127, 141, 155],
  [100, 114, 128, 142, 156],
  [101, 115, 129, 143, 157],
  [102, 116, 130, 144, 158],
  [103, 117, 131, 145, 159],
  [104, 118, 132, 146, 160],
  [109, 123, 137, 151, 165],
  [110, 124, 138, 152, 166],
  [111, 125, 139, 153, 167],
  [112, 126, 140, 154, 168],
  [113, 127, 141, 155, 169],
  [114, 128, 142, 156, 170],
  [115, 129, 143, 157, 171],
  [116, 130, 144, 158, 172],
  [117, 131, 145, 159, 173],
  [118, 132, 146, 160, 174],
  [119, 133, 147, 161, 175],
  [124, 138, 152, 166, 180],
  [125, 139, 153, 167, 181],
  [126, 140, 154, 168, 182],
  [127, 141, 155, 169, 183],
  [128, 142, 156, 170, 184],
  [129, 143, 157, 171, 185],
  [130, 144, 158, 172, 186],
  [131, 145, 159, 173, 187],
  [132, 146, 160, 174, 188],
  [133, 147, 161, 175, 189],
  [134, 148, 162, 176, 190],
  [139, 153, 167, 181, 195],
  [140, 154, 168, 182, 196],
  [141, 155, 169, 183, 197],
  [142, 156, 170, 184, 198],
  [143, 157, 171, 185, 199],
  [144, 158, 172, 186, 200],
  [145, 159, 173, 187, 201],
  [146, 160, 174, 188, 202],
  [147, 161, 175, 189, 203],
  [148, 162, 176, 190, 204],
  [149, 163, 177, 191, 205],
  [154, 168, 182, 196, 210],
  [155, 169, 183, 197, 211],
  [156, 170, 184, 198, 212],
  [157, 171, 185, 199, 213],
  [158, 172, 186, 200, 214],
  [159, 173, 187, 201, 215],
  [160, 174, 188, 202, 216],
  [161, 175, 189, 203, 217],
  [162, 176, 190, 204, 218],
  [163, 177, 191, 205, 219],
  [164, 178, 192, 206, 220],
];
const ticWin = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6],
];

export function isWin(board) {
  if (board.length===225) return isOmokWin(board);
  for (const [a, b, c] of ticWin) {
    if (board[a] === board[b] && board[b] === board[c] && board[a] !== 0) {
      return board[a];
    }
  }
  return 0;
}


export function isOmokWin(board) {
  for (const [a, b, c, d, e] of omokWin) {
    if (
      board[a] === board[b] &&
      board[b] === board[c] &&
      board[c] === board[d] &&
      board[d] === board[e] &&
      board[a] !== 0
    ) {
      return board[a];
    }
  }
  return 0;
}

class State {
  constructor(board, player) {
    this.board = board;
    this.player = player; // 현재 board 에서 마지막으로 둔 player
    this.round = 0;
  }

  simulate() {
    const newBoard = this.board.slice();
    if (isWin(newBoard)) {
      return [isWin(newBoard), this.round];
    }
    const randomMove = () => {
      let r = Math.floor(Math.random() * this.board.length);
      while (newBoard[r] != 0) {
        r = Math.floor(Math.random() * this.board.length);
      }
      return r;
    };
    this.round = 0;
    while (newBoard.includes(0)) {
      this.round += 1;
      newBoard[randomMove()] = 3 - this.player;
      if (isWin(newBoard)) {
        return [isWin(newBoard), this.round];
      }
      this.player = this.player === 1 ? 2 : 1;
    }
    return [0, Math.floor(this.round / 2)];
  }
}

export default class MCTS {
  constructor(
    n_iterations = 1000,
    board = [0, 0, 0, 0, 0, 0, 0, 0, 0],
    player = 1,
  ) {
    this.n_iterations = n_iterations;
    this.board = board;
    this.player = player;
    this.root = new Node(board, player, null);
  }

  search() {
    for (let i = 0; i < this.n_iterations; i++) {
      if (i%100===0) console.log(Math.round(i/this.n_iterations*100*10)/10 + "%");
      let node = this.root;

      node = node.selection();
      // console.log("selection", node);
      if (node === null) return this.nextBoard();
      if (node.isTerminal()) {
        // console.log("터미널");
        continue;
      }

      node = node.expansion();
      // console.log("expansion", node);
      if (node === null) {
        // console.log("확장 중지");
        continue;
      }

      node.simulate();
    }
    return this.nextBoard();
  }

  nextBoard() {
    console.log(this.root);
    return this.root.children.reduce(
      (a, b) => (a.winRate() > b.winRate() ? a : b),
      this.root.children[0]
    ).board;
  }
}
